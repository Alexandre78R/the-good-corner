# interface Ad {
#     id: number;
#     title: string;
#     description: string;
#     owner: string;
#     price: number;
#     location: string;
#     picture: string;
#     createdAt: Date;
#     updatedAt: Date;
#     category: Category;
#     tags: Tag[];
# }

# type Ad {
#   id: ID
#   title: String
#   description: String
#   owner: String
#   price: Float
#   location: String
#   picture: String
#   createdAt: String
#   updatedAt: String
#   category: Category
#   # tags: [Tag]
# }
# type Query {
#   listAds: [Ad]
#   listAdsByCategory(id: ID): [Ad]
#   findAdById(id: ID): Ad
# }

# type Mutation {
#   createAd(data: CreateAdInput): Ad
#   deleteAd(id: ID): Ad
#   updateAd(data: UpdateAdInput) : Ad
# }

# input PartialCategoryInput {
#   id: ID
# }
# input CreateAdInput {
#   id: ID
#   title: String!
#   description: String!
#   owner: String!
#   price: Float!
#   location: String!
#   picture: String!
#   category: PartialCategoryInput
# }

# input UpdateAdInput {
#   id: ID!
#   title: String
#   description: String
#   owner: String
#   price: Float
#   location: String
#   picture: String
#   category: PartialCategoryInput
# }

#Query et Mutation
type Query {
  listAds: [Ad]
  listAdsByCategory(id: ID!): [Ad]
  findAdById(id: ID!): Ad
}

type Mutation {
  createAd(data: CreateAdInput): Ad
  deleteAd(id: ID!): Ad
  updateAd(data: UpdateAdInput): Ad
}


#Types
type Ad {
  id: ID
  title: String
  description: String
  owner: String
  price: Float
  location: String
  picture: String
  createdAt: String
  updatedAt: String
  category: Category
  # tags: [Tag]
}


#Inputs
input PartialCategoryInput {
  id: ID!
}
input CreateAdInput {
  title: String!
  description: String!
  owner: String!
  price: Float!
  location: String!
  picture: String!
  category: PartialCategoryInput
}

input UpdateAdInput {
  id: ID!
  title: String
  description: String
  owner: String
  price: Float
  location: String
  picture: String
  category: PartialCategoryInput
}